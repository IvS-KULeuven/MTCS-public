<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <POU Name="M1" Id="{b47ad728-d27e-4f03-860b-d2a647188d33}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK M1 EXTENDS SM_M1
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    _initializingCurrentAction : INT;
    _onFirstStartCurrentAction : INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[_update();

_onFirstStart();
_initializing();
_changingOperatingState();
_locking();
_unlocking();

_update();
]]></ST>
    </Implementation>
    <Method Name="_update" Id="{5c631acf-4c35-4e31-88b1-36947ae7ac73}">
      <Declaration><![CDATA[METHOD _update
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^(operatorStatus := SUPER^.operatorStatus, tubeAngleMeasurement := SUPER^.tubeAngleMeasurement);

IF statuses.initializationStatus.initialized THEN
    IF statuses.healthStatus.bad THEN
        actualStatus := 'ERROR';
    ELSIF statuses.healthStatus.good OR statuses.healthStatus.warning THEN
        IF statuses.operatingStatus.manual THEN
            actualStatus := 'MANUAL';
        ELSIF statuses.operatingStatus.auto THEN
            IF statuses.busyStatus.busy THEN
                actualStatus := 'BUSY';
            ELSIF statuses.busyStatus.idle THEN
                IF statuses.healthStatus.good THEN
                    actualStatus := 'OK';
                ELSE
                    actualStatus := 'WARNING';
				END_IF
            ELSE
                actualStatus := 'UNKNOWN';
			END_IF
        ELSE
            actualStatus := 'UNKNOWN';
		END_IF
    ELSE
        actualStatus := 'UNKNOWN';
	END_IF
ELSE
    actualStatus := InitializationStatusToString(statuses.initializationStatus);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_changingOperatingState" Id="{62546fdf-7875-4217-8a90-e7a32bedfee7}">
      <Declaration><![CDATA[METHOD _changingOperatingState
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF SUPER^.processes.changeOperatingState.statuses.busyStatus.busy THEN
	SUPER^.processes.changeOperatingState.setStarted();
	SUPER^.statuses.operatingStatus(state := SUPER^.processes.changeOperatingState.get.state);
	SUPER^.processes.changeOperatingState.setFinished();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_unlocking" Id="{76bec6bc-a8f8-4331-a277-4e485c0b5465}">
      <Declaration><![CDATA[METHOD _unlocking
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF processes.unlock.statuses.busyStatus.busy THEN
	statuses.initializationStatus(state := InitializationStates.INITIALIZED);
	
	// done
	processes.unlock.setGood();
	processes.unlock.setFinished();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_initializing" Id="{7c52a0df-4460-4e6a-b23c-220e925524cb}">
      <Declaration><![CDATA[METHOD _initializing
VAR_INPUT
END_VAR
VAR
    
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF processes.initialize.statuses.busyStatus.busy THEN
	
	// start up the initialization
	IF NOT processes.initialize.statuses.startedStatus.started THEN
        // we're now initializing
        statuses.initializationStatus(state := InitializationStates.INITIALIZING);
        _initializingCurrentAction := 0;
		// OK we're started now
		processes.initialize.setStarted();
	END_IF;
    
    // process the actions
    CASE _initializingCurrentAction OF
        
        0:
            // start loading the config from XML file
            parts.configManager.processes.load.start(parts.configManager.processes.load.set.filePath);
            _initializingCurrentAction := 1;
        1:
            // wait until the config has been loaded
            IF parts.configManager.processes.load.statuses.busyStatus.idle THEN
                IF parts.configManager.processes.load.statuses.healthStatus.good THEN
                    _initializingCurrentAction := 2;
                ELSE
                    _initializingCurrentAction := 999;
                END_IF
            END_IF
        2:
            // now start activating the config
            parts.configManager.processes.activate.start();
            _initializingCurrentAction := 3;
        3:
            // wait until the config has been activated
            IF parts.configManager.processes.activate.statuses.busyStatus.idle THEN
                IF parts.configManager.processes.activate.statuses.healthStatus.good THEN
                    _initializingCurrentAction := 4;
                ELSE
                    _initializingCurrentAction := 999;
                END_IF
            END_IF
        4:
            // just finish!
            _initializingCurrentAction := 1000;
        999:
            // there has been an error!
            statuses.initializationStatus(state := InitializationStates.INITIALIZING_FAILED);
            // done
            processes.initialize.setBad();
            processes.initialize.setFinished();
        1000:
            // all done!
            statuses.initializationStatus(state := InitializationStates.INITIALIZED);
            processes.initialize.setGood();
            processes.initialize.setFinished();
	END_CASE
    
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_onFirstStart" Id="{7e6d1c2c-fc38-4a8c-905a-6703aad07886}">
      <Declaration><![CDATA[METHOD _onFirstStart
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _onFirstStartCurrentAction OF
    0:
        // start loading the config from XML file
        parts.configManager.processes.load.start(parts.configManager.processes.load.set.filePath);
        _onFirstStartCurrentAction := 1;
    1:
        // wait until the config has been loaded
        IF parts.configManager.processes.load.statuses.busyStatus.idle THEN
            IF parts.configManager.processes.load.statuses.healthStatus.good THEN
                _onFirstStartCurrentAction := 2;
            ELSE
                _onFirstStartCurrentAction := 999;
            END_IF
        END_IF
    2:
        // now start activating the config
        parts.configManager.processes.activate.start();
        _onFirstStartCurrentAction := 3;
    3:
        // wait until the config has been activated
        IF parts.configManager.processes.activate.statuses.busyStatus.idle THEN
            IF parts.configManager.processes.activate.statuses.healthStatus.good THEN
                _onFirstStartCurrentAction := 4;
            ELSE
                _onFirstStartCurrentAction := 999;
            END_IF
        END_IF
    4:
        // nothing to do, done!
        ;
    999:
        // error, but nothing we can do about it now!
        ;

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{d2b82647-208a-42fc-b005-d369669252a7}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[parts.configManager.configure(
    editableConfigAddress       := ADR(editableConfig),
    activeConfigAddress         := ADR(config),
    configLength                := SIZEOF(editableConfig),
    editableConfigSymbolName    := GLOBAL.config.M1_EDITABLE_CONFIG_SYMBOL_NAME,
    activeConfigSymbolName      := GLOBAL.config.M1_ACTIVE_CONFIG_SYMBOL_NAME,
    configFilePath              := GLOBAL.config.M1_CONFIG_FILE_PATH);]]></ST>
      </Implementation>
    </Method>
    <Method Name="_locking" Id="{fc045a65-678a-4e00-b569-6ce60b1701ea}">
      <Declaration><![CDATA[METHOD _locking
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF processes.lock.statuses.busyStatus.busy THEN
	statuses.initializationStatus(state := InitializationStates.LOCKED);
	
	// done
	processes.lock.setGood();
	processes.lock.setFinished();
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>