<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4018.2">
  <POU Name="M3Rotation" Id="{a4c75afd-8734-4fe6-b567-fe3bfa9f13a5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK M3Rotation EXTENDS SM_M3Rotation
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    _mc_setPosition : MC_SetPosition;
    _resettingSubstate : INT := 0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[_update();

_goto();
_reset();
_abort();
_calibrate();

_update();]]></ST>
    </Implementation>
    <Method Name="_update" Id="{6d573c50-7f73-4f5e-8f95-473c02fa098f}">
      <Declaration><![CDATA[METHOD _update
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^(
	initializationStatus := initializationStatus, 
	operatingStatus      := operatingStatus, 
	operatorStatus       := operatorStatus, 
	config               := config, 
	m3Config             := m3Config);

IF statuses.healthStatus.bad THEN
    actualStatus := 'Error';
ELSE
    IF statuses.busyStatus.idle THEN
        actualStatus := 'Idle';
    ELSE
        IF parts.calibrateProcedure.statuses.busyStatus.busy THEN
            actualStatus := 'Calibrating...';
        ELSIF parts.gotoProcedure.statuses.busyStatus.busy THEN
            actualStatus := 'Going to position...';
        ELSE
            actualStatus := 'Busy';
		END_IF
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_abort" Id="{70532040-f781-4a86-9758-50b39a48be6f}">
      <Declaration><![CDATA[METHOD _abort
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF processes.abort.isBusy() THEN

    IF NOT processes.abort.isStarted() THEN
        // reset the procedures
        parts.gotoProcedure.abort();
        parts.calibrateProcedure.abort();
        // update the target
        target(
            isTargetGiven       := FALSE,
            newPositionDegrees  := processes.goto.get.position,
            newOffsetDegrees    := processes.goto.get.offset,
            knownPositions      := m3Config.knownPositions);
        // okay, the procedures are now busy aborting. 
        // In the coming seconds we can simply monitor the gotoProcedure
        // to decide when the abort process is finished.
        processes.abort.setStarted();
    ELSE
        // monitor the gotoProcedure to decide when the abort process is finished.
        IF parts.gotoProcedure.statuses.busyStatus.idle AND parts.calibrateProcedure.statuses.busyStatus.idle THEN
            
            IF parts.gotoProcedure.statuses.healthStatus.good AND parts.calibrateProcedure.statuses.healthStatus.good  THEN
                processes.reset.setGood();
                processes.reset.setFinished();
            ELSE
                processes.reset.setBad();
                processes.reset.setFinished();
			END_IF
            
		END_IF
    
	END_IF
    
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_reset" Id="{88ff9a12-b635-4f92-a1b4-df8dc406e5f6}">
      <Declaration><![CDATA[METHOD _reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF processes.reset.isBusy() THEN
    CASE _resettingSubstate OF
        0:
            parts.positioningAxis.processes.reset.start();
            parts.antiBacklashAxis.processes.reset.start();
            parts.positioningHallAxis.processes.reset.start();
            _resettingSubstate := 1;
        1:
            IF     parts.positioningAxis.processes.reset.isIdle() 
               AND parts.antiBacklashAxis.processes.reset.isIdle() 
               AND parts.positioningHallAxis.processes.reset.isIdle() 
            THEN
                IF      parts.positioningAxis.processes.reset.isGood() 
                    AND parts.antiBacklashAxis.processes.reset.isGood() 
                    AND parts.positioningHallAxis.processes.reset.isGood() 
                THEN
                    _resettingSubstate := 2;
                ELSE
                    _resettingSubstate := 99;
                END_IF
            END_IF
        2:
            processes.reset.setStarted();
            parts.gotoProcedure.reset();
            _resettingSubstate := 3;
        3:
            IF parts.gotoProcedure.statuses.busyStatus.idle THEN
                IF parts.gotoProcedure.statuses.healthStatus.good THEN
                    _resettingSubstate := 4;
                ELSE
                    _resettingSubstate := 99;
				END_IF
            END_IF
        4:
            parts.calibrateProcedure.reset();
            _resettingSubstate := 5;
        5:
            IF parts.calibrateProcedure.statuses.busyStatus.idle  THEN
                IF parts.gotoProcedure.statuses.healthStatus.good  THEN
                    _resettingSubstate := 100;
                ELSE
                    _resettingSubstate := 99;
				END_IF
            END_IF
        99:
            processes.reset.setBad();
            processes.reset.setFinished();
            _resettingSubstate := 0;
        100:
            processes.reset.setGood();
            processes.reset.setFinished();
            _resettingSubstate := 0;
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_calibrate" Id="{890069ae-7784-4d85-9172-5aac393d54e5}">
      <Declaration><![CDATA[METHOD _calibrate
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF processes.calibrate.isBusy() THEN

    IF NOT processes.calibrate.isStarted() THEN
        // reset the procedure
        parts.calibrateProcedure.start();
        // update the target
        target(
            isTargetGiven       := FALSE,
            newPositionDegrees  := processes.goto.get.position,
            newOffsetDegrees    := processes.goto.get.offset,
            knownPositions      := m3Config.knownPositions);
        // okay, the procedure is now busy calibrating. 
        // In the coming seconds we can simply monitor the calibrateProcedure
        // to decide when the calibrate process is finished.
        processes.calibrate.setStarted();
    ELSE
        // monitor the calibrateProcedure to decide when the calibrate process is finished.
        IF parts.calibrateProcedure.statuses.busyStatus.idle THEN
            
            IF parts.calibrateProcedure.statuses.healthStatus.good THEN
                processes.calibrate.setGood();
                processes.calibrate.setFinished();
            ELSE
                processes.calibrate.setBad();
                processes.calibrate.setFinished();
			END_IF
            
		END_IF
    
	END_IF
    
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{a8b2d9ce-19a1-4579-8f16-b5322c1d2da8}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[parts.antiBacklashAxis.configureMaster(masterAddr := ADR(parts.positioningHallAxis.axis_ref));
parts.positioningDrive.configure(ctrlTimeMultiplier := 30, noOfCurrentSamples := 10);
parts.antiBacklashDrive.configure(ctrlTimeMultiplier := 30, noOfCurrentSamples := 10);]]></ST>
      </Implementation>
    </Method>
    <Method Name="_goto" Id="{d3680576-aa65-4554-8b23-bb7a88266a89}">
      <Declaration><![CDATA[METHOD _goto
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF processes.goto.isBusy() THEN
    
            
    IF NOT processes.goto.isStarted() THEN
        // update the target
        target(
            isTargetGiven       := TRUE,
            newPositionDegrees  := processes.goto.get.position,
            newOffsetDegrees    := processes.goto.get.offset,
            knownPositions      := m3Config.knownPositions);
        // start the procedure
        parts.gotoProcedure.start();
        // okay, the process is now started. 
        // In the coming seconds we can simply monitor the gotoProcedure
        // to decide when the goto process is finished.
        processes.goto.setStarted();
    ELSE
        // if the goto was called, but it was already started, then we check if we need to 
        // update the target and re-call the gotoProcedure.start() method:
        IF     processes.goto.get.position <> target.position.degrees.value 
            OR processes.goto.get.offset <> target.offset.degrees.value 
        THEN
            // update the target
            target(
                isTargetGiven       := TRUE,
                newPositionDegrees  := processes.goto.get.position,
                newOffsetDegrees    := processes.goto.get.offset,
                knownPositions      := m3Config.knownPositions); 
            // update the procedure
            parts.gotoProcedure.start();
		END_IF
    
        // monitor the gotoProcedure to decide when the goto process is finished.
        IF parts.gotoProcedure.statuses.busyStatus.idle THEN
            
            IF parts.gotoProcedure.statuses.healthStatus.good THEN
                processes.goto.setGood();
                processes.goto.setFinished();
            ELSE
                processes.goto.setBad();
                processes.goto.setFinished();
			END_IF
        
		END_IF
    
	END_IF
    
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>