<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <POU Name="AxesAzimuthAxis" Id="{71485dda-884a-4098-b5e1-d028dd61bf6b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK AxesAzimuthAxis EXTENDS SM_AxesAzimuthAxis
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
    // setpoint generators
	{attribute 'OPC.UA.DA' := '0'}
    _aziSetGen : AxesExternalSetpointGenerator;
	{attribute 'OPC.UA.DA' := '0'}
    _ablSetGen : AxesTorqueSetpointGenerator;
    
    // helpers
	{attribute 'OPC.UA.DA' := '0'}
    _powerOnHelper : AxesPowerOnHelper;
	{attribute 'OPC.UA.DA' := '0'}
    _powerOffHelper : AxesPowerOffHelper;
	{attribute 'OPC.UA.DA' := '0'}
    _moveOutOfLimitSwitchHelper : AxesMoveOutOfLimitSwitchHelper;
	{attribute 'OPC.UA.DA' := '0'}
    _homingHelper : AxesHomingHelper;
	{attribute 'OPC.UA.DA' := '0'}
    _stopHelper : AxesStopHelper;
	{attribute 'OPC.UA.DA' := '0'}
    _quickStopHelper : AxesQuickStopHelper;
	{attribute 'OPC.UA.DA' := '0'}
    _setPositionHelper : AxesSetPositionHelper;
	{attribute 'OPC.UA.DA' := '0'}
    _unlockBrakeHelper : AxesUnlockBrakeHelper;
    
    // RMS and average setpoint deviation calculator
	{attribute 'OPC.UA.DA' := '0'}
    _deviationCalculator: AverageAndRmsCalculator;
    // local copy of the isTracking flag
	{attribute 'OPC.UA.DA' := '0'}
    _isTracking: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[_update();

_resetting();

_powerOnHelper(
    id                      := id,
    setpointGenerator       := _aziSetGen,
    powerOn                 := processes.powerOn,
    stop                    := processes.stop,
    reset                   := processes.reset,
    virtual                 := parts.virtualAxis,
    physical                := parts.physicalAxis,
    targetStart             := targetStart,
    pAblAxis                := ADR(parts.ablAxis),
    pAblDriveChannel        := ADR(ablDriveChannel),
    pAblSetpointGenerator   := ADR(_ablSetGen));
    
_powerOffHelper(
    setpointGenerator       := _aziSetGen,
    powerOff                := processes.powerOff,
    stop                    := processes.stop,
    virtual                 := parts.virtualAxis,
    physical                := parts.physicalAxis,
    pAblAxis                := ADR(parts.ablAxis),
    pAblDriveChannel        := ADR(ablDriveChannel),
    pAblSetpointGenerator   := ADR(_ablSetGen));

_moveOutOfLimitSwitchHelper(
    setpointGenerator            := _aziSetGen,
    positiveLimitSwitchError     := positiveLimitSwitchError,
    negativeLimitSwitchError     := negativeLimitSwitchError,
    positiveLimitSwitchInput     := config.positiveLimitSwitchInput,
    negativeLimitSwitchInput     := config.negativeLimitSwitchInput,
    moveOutOfLimitSwitchDistance := config.moveOutOfLimitSwitchDistance,
    moveOutOfLimitSwitch         := processes.moveOutOfLimitSwitch,
    moveRelative                 := processes.moveRelative,
    powerOn                      := processes.powerOn,
    reset                        := processes.reset,
    virtual                      := parts.virtualAxis,
    physical                     := parts.physicalAxis,
    driveChannel                 := aziMainDriveChannel);

_homingHelper(
    id                          := id,
    homingStartAbsEncPosition   := config.homingStartAbsEncPosition,
    homingVelocity              := config.homingVelocity,
    homingRange                 := config.homingRange,
    homingGotoStartVelocity     := config.homingGotoStartVelocity,
    homingHomePosition          := config.homingHomePosition,
    lidasInvert                 := config.lidasInvert,
    absoluteEncoderPosition     := absoluteEncoderPosition.degrees.value,
    lidaAveragePosition         := lidaAveragePosition.degrees.value,
    lida1Position               := lida1Position.degrees.value,
    setpointGenerator           := _aziSetGen,
    doHoming                    := processes.doHoming,
    stop                        := processes.stop,
    setPosition                 := processes.setPosition,
    virtual                     := parts.virtualAxis,
    physical                    := parts.physicalAxis,
    pLida1                      := ADR(parts.lida1),
    pLida2                      := ADR(parts.lida2),
    pLida3                      := ADR(parts.lida3),
    pLida4                      := ADR(parts.lida4));
    
_moveAbsolute();
_moveRelative();
_moveVelocity();
    
_stopHelper(
    setpointGenerator   := _aziSetGen,
    stop                := processes.stop,
    virtual             := parts.virtualAxis,
    physical            := parts.physicalAxis);
    
_quickStopHelper(
    deceleration        := config.quickStopDeceleration, 
    jerk                := config.quickStopJerk,
    setpointGenerator   := _aziSetGen,
    quickStop           := processes.quickStop,
    virtual             := parts.virtualAxis,
    physical            := parts.physicalAxis);
    
_setPositionHelper(
    setpointGenerator   := _aziSetGen,
    setPosition         := processes.setPosition,
    virtual             := parts.virtualAxis,
    physical            := parts.physicalAxis);
    
_unlockBrakeHelper(
    unlockBrake         := processes.unlockBrake,
    driveChannel        := aziDriveChannel);

_update();]]></ST>
    </Implementation>
    <Method Name="callOnce" Id="{34af8f95-f93c-463e-bd21-f0c89d4f4cfb}">
      <Declaration><![CDATA[METHOD callOnce : BOOL
VAR_INPUT
    dcTime : LINT; 
	targetPosDeg  : LREAL; // degrees
	targetVeloDegPerSec : LREAL; // degrees/sec
	targetAccDegPerSec2  : LREAL; // degrees/sec2
    trackingStart : LREAL; // degrees
    modelDelta : LREAL; // degrees
END_VAR
VAR_IN_OUT
    isTracking : BOOL;
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// run the setpoint generators
_ablSetGen(
    ablMaxTorqueRiseSpeed   := config.ablMaxTorqueRiseSpeed,
    ablMaxTorqueFallSpeed   := config.ablMaxTorqueFallSpeed,
    maxAccelerationSetpoint := config.maxAccelerationSetpoint,
    ablMaxTorque            := config.ablMaxTorque,
    ablMinTorque            := config.ablMinTorque,
    ablZeroAccTorque        := config.ablZeroAccTorque,
    ablTorqueOutputOverride := config.ablTorqueOutputOverride,
    aziAndAblSameDirection  := config.aziAndAblSameDirection,
    ablPositiveTorque       := config.ablPositiveTorque,
    physicalAxis            := parts.physicalAxis,
    virtualAxis             := parts.virtualAxis,
    ablAxis                 := parts.ablAxis);
_aziSetGen( 
    dcTime                      := dcTime,
    tracking                    := isTracking,
    virtual                     := parts.virtualAxis.axis_ref, 
    physical                    := parts.physicalAxis.axis_ref, 
    targetPos                   := targetPosDeg, 
    targetVelo                  := targetVeloDegPerSec, 
    targetAcc                   := targetAccDegPerSec2, 
    trackingStart               := trackingStart,
    velocityLimit               := config.velocityLimit,
    accelerationLimit           := config.accelerationLimit,
    minTrackingPositionSetpoint := config.minPositionSetpoint,
    maxTrackingPositionSetpoint := config.maxPositionSetpoint,
    minVirtualPositionSetpoint  := config.minPositionLimitVirtualAxis,
    maxVirtualPositionSetpoint  := config.maxPositionLimitVirtualAxis,
    limitReached                => setPosLimitReached);
    
// update the torque command value
ablDriveChannel.torqueCommandValue := AxesCalculateTorqueCommandValue(
    torqueSetpoint := _ablSetGen.output / 180.0,
    torqueConstant := ablDriveChannel.torqueConstant,
    channelPeakCurrent := ablDriveChannel.channelPeakCurrent.amps.value);

// apply the position correction
IF parts.physicalAxis.axis_ref.Status.Homed THEN
    parts.physicalAxis.setPositionCorrection( -(lidaAveragePosition.degrees.value - parts.physicalAxis.axis_ref.NcToPlc.ActPosWithoutPosCorrection) );
ELSE
    parts.physicalAxis.setPositionCorrection(0.0);
END_IF

// calculate the average and RMS deviation
_deviationCalculator(in := parts.physicalAxis.axis_ref.NcToPlc.ActPos - parts.physicalAxis.axis_ref.NcToPlc.SetPos );
deviation1SecAverage(newDegreesValue := _deviationCalculator.avg);
deviation1SecRMS(newDegreesValue := _deviationCalculator.rms);

// keep a local copy of the isTracking variable
_isTracking := isTracking;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_resetting" Id="{3b518961-66db-4ec2-a4b1-b3346bdae70c}">
      <Declaration><![CDATA[METHOD _resetting : LREAL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF processes.reset.isBusy() THEN
    
    IF NOT processes.reset.isStarted() THEN
        processes.reset._state := 0;
        processes.reset.setStarted();
	END_IF
    
    CASE processes.reset._state OF
        0:
            // reset all processes so that they are green again
            processes.doHoming.resetIfIdle();
            processes.moveAbsolute.resetIfIdle();
            processes.moveOutOfLimitSwitch.resetIfIdle();
            processes.moveRelative.resetIfIdle();
            processes.moveVelocity.resetIfIdle();
            processes.powerOff.resetIfIdle();
            processes.powerOn.resetIfIdle();
            processes.quickStop.resetIfIdle();
            processes.setPosition.resetIfIdle();
            processes.stop.resetIfIdle();
            processes.unlockBrake.resetIfIdle();
            
            processes.reset.setActualStatus('Powering off the axis');
            // power off the axis
            processes.powerOff.start();
            processes.reset._state := 1;
        1:
            IF processes.powerOff.isIdle() THEN
                // regardless of whether power off worked or not, proceed    
                processes.reset._state := 2;
			END_IF
        2:
            // update the physical axis soft position limit values
            parts.physicalAxis.processes.writeParameter.start(parameterNumber := MC_AxisParameter.SWLimitNeg, value := config.minPositionLimitPhysicalAxis);
            processes.reset._state := 3;
        3:
            IF parts.physicalAxis.processes.writeParameter.isIdle() THEN
                IF parts.physicalAxis.processes.writeParameter.isGood() THEN
                    processes.reset._state := 4;
                ELSE
                    processes.reset.setActualStatus(CONCAT('Could not set the physical SWLimitNeg: ', parts.physicalAxis.processes.writeParameter.actualStatus));
                    processes.reset._state := 999;
				END_IF
			END_IF
        4:
            parts.physicalAxis.processes.writeParameter.start(parameterNumber := MC_AxisParameter.SWLimitPos, value := config.maxPositionLimitPhysicalAxis);
            processes.reset._state := 5;
        5:
            IF parts.physicalAxis.processes.writeParameter.isIdle() THEN
                IF parts.physicalAxis.processes.writeParameter.isGood() THEN
                    processes.reset._state := 6;
                ELSE
                    processes.reset.setActualStatus(CONCAT('Could not set the physical SWLimitPos: ', parts.physicalAxis.processes.writeParameter.actualStatus));
                    processes.reset._state := 999;
				END_IF
			END_IF
        6:
            parts.physicalAxis.processes.writeBoolParameter.start(parameterNumber := MC_AxisParameter.EnableLimitNeg, value := TRUE);
            processes.reset._state := 7;
        7:
            IF parts.physicalAxis.processes.writeBoolParameter.isIdle() THEN
                IF parts.physicalAxis.processes.writeBoolParameter.isGood() THEN
                    processes.reset._state := 8;
                ELSE
                    processes.reset.setActualStatus(CONCAT('Could not set the physical EnableLimitNeg: ', parts.physicalAxis.processes.writeBoolParameter.actualStatus));
                    processes.reset._state := 999;
				END_IF
			END_IF
        8:
            parts.physicalAxis.processes.writeBoolParameter.start(parameterNumber := MC_AxisParameter.EnableLimitPos, value := TRUE);
            processes.reset._state := 9;
        9:
            IF parts.physicalAxis.processes.writeBoolParameter.isIdle() THEN
                IF parts.physicalAxis.processes.writeBoolParameter.isGood() THEN
                    processes.reset._state := 10;
                ELSE
                    processes.reset.setActualStatus(CONCAT('Could not set the physical EnableLimitPos: ', parts.physicalAxis.processes.writeBoolParameter.actualStatus));
                    processes.reset._state := 999;
				END_IF
			END_IF
        10:
            // update the virtual axis soft position limit values
            parts.virtualAxis.processes.writeParameter.start(parameterNumber := MC_AxisParameter.SWLimitNeg, value := config.minPositionLimitVirtualAxis);
            processes.reset._state := 11;
        11:
            IF parts.virtualAxis.processes.writeParameter.isIdle() THEN
                IF parts.virtualAxis.processes.writeParameter.isGood() THEN
                    processes.reset._state := 12;
                ELSE
                    processes.reset.setActualStatus(CONCAT('Could not set the virtual SWLimitNeg: ', parts.virtualAxis.processes.writeParameter.actualStatus));
                    processes.reset._state := 999;
				END_IF
			END_IF
        12:
            parts.virtualAxis.processes.writeParameter.start(parameterNumber := MC_AxisParameter.SWLimitPos, value := config.maxPositionLimitVirtualAxis);
            processes.reset._state := 13;
        13:
            IF parts.virtualAxis.processes.writeParameter.isIdle() THEN
                IF parts.virtualAxis.processes.writeParameter.isGood() THEN
                    processes.reset._state := 14;
                ELSE
                    processes.reset.setActualStatus(CONCAT('Could not set the virtual SWLimitPos: ', parts.virtualAxis.processes.writeParameter.actualStatus));
                    processes.reset._state := 999;
				END_IF
			END_IF
        14:
            parts.virtualAxis.processes.writeBoolParameter.start(parameterNumber := MC_AxisParameter.EnableLimitNeg, value := TRUE);
            processes.reset._state := 15;
        15:
            IF parts.virtualAxis.processes.writeBoolParameter.isIdle() THEN
                IF parts.virtualAxis.processes.writeBoolParameter.isGood() THEN
                    processes.reset._state := 16;
                ELSE
                    processes.reset.setActualStatus(CONCAT('Could not set the virtual EnableLimitNeg: ', parts.virtualAxis.processes.writeBoolParameter.actualStatus));
                    processes.reset._state := 999;
				END_IF
			END_IF
        16:
            parts.virtualAxis.processes.writeBoolParameter.start(parameterNumber := MC_AxisParameter.EnableLimitPos, value := TRUE);
            processes.reset._state := 17;
        17:
            IF parts.virtualAxis.processes.writeBoolParameter.isIdle() THEN
                IF parts.virtualAxis.processes.writeBoolParameter.isGood() THEN
                    processes.reset._state := 18;
                ELSE
                    processes.reset.setActualStatus(CONCAT('Could not set the virtual EnableLimitPos: ', parts.virtualAxis.processes.writeBoolParameter.actualStatus));
                    processes.reset._state := 999;
				END_IF
			END_IF
        18:
            // unlock the ABL motor brake
            ablDriveChannel.processes.setBrake.start(newState := DriveBrakeStates.BRAKE_FORCE_UNLOCK);
            processes.reset._state := 19;
        19:
            IF ablDriveChannel.processes.setBrake.isIdle() THEN
                IF ablDriveChannel.processes.setBrake.isGood() THEN
                    processes.reset._state := 20;
                ELSE
                    processes.reset.setActualStatus('Could not unlock the ABL motor brake!');
                    processes.reset._state := 999;
				END_IF
			END_IF
        20:
            // try to acknowledge the safe state (if present)
            processes.reset.setActualStatus('Resetting safety');
            aziDriveChannel.processes.acknowledgeSafetyError.start();
            ablDriveChannel.processes.acknowledgeSafetyError.start();
            processes.reset._state := 21;
        21:
            IF aziDriveChannel.processes.acknowledgeSafetyError.isIdle() AND ablDriveChannel.processes.acknowledgeSafetyError.isIdle()  THEN
                IF aziDriveChannel.processes.acknowledgeSafetyError.isGood() AND ablDriveChannel.processes.acknowledgeSafetyError.isGood() THEN
                    processes.reset._state := 22;
                ELSE
                    processes.reset.setActualStatus('Cannot get out of safe state!');
                    processes.reset._state := 999;
                END_IF
            END_IF
        22:
            // reset the drive channel
            processes.reset.setActualStatus('Resetting the drive channel');
            aziDriveChannel.processes.reset.start();
            ablDriveChannel.processes.reset.start();
            processes.reset._state := 23;
        23:
            IF aziDriveChannel.processes.reset.isIdle() AND ablDriveChannel.processes.reset.isIdle() THEN
                IF aziDriveChannel.processes.reset.isGood() AND ablDriveChannel.processes.reset.isGood() THEN
                    processes.reset._state := 24;
                ELSE
                    processes.reset.setActualStatus('Could not reset the drive channels!');
                    processes.reset._state := 999;
                END_IF
            END_IF
        24:
            // update the drive channel
            processes.reset.setActualStatus('Updating the drive channel');
            aziDriveChannel.processes.update.start();
            ablDriveChannel.processes.update.start();
            processes.reset._state := 25;
        25:
            IF aziDriveChannel.processes.update.isIdle() AND ablDriveChannel.processes.update.isIdle() THEN
                IF aziDriveChannel.processes.update.isGood() AND ablDriveChannel.processes.update.isGood() THEN
                    processes.reset._state := 26;
                ELSE
                    processes.reset.setActualStatus('Could not update the drive channel!');
                    processes.reset._state := 999;
                END_IF
            END_IF
        26:
            // reset the axis
            processes.reset.setActualStatus('Resetting the axes');
            parts.physicalAxis.processes.reset.start();
            parts.ablAxis.processes.reset.start();
            parts.virtualAxis.processes.reset.start();
            processes.reset._state := 27;
        27:
            IF     parts.virtualAxis.processes.reset.isIdle() 
               AND parts.physicalAxis.processes.reset.isIdle() 
               AND parts.ablAxis.processes.reset.isIdle() THEN
                IF     parts.virtualAxis.processes.reset.isGood() 
                   AND parts.physicalAxis.processes.reset.isGood() 
                   AND parts.ablAxis.processes.reset.isGood() THEN
                    processes.reset._state := 28;
                ELSE
                    processes.reset.setActualStatus('Could not reset the axes');
                    processes.reset._state := 999;
                END_IF
            END_IF
        28:
            // synchronize the motor encoder with the absolute encoder, if we haven't homed
            IF parts.physicalAxis.axis_ref.Status.Homed THEN
                processes.reset._state := 1000;
            ELSE
                parts.physicalAxis.processes.setPosition.start(value := absoluteEncoderPosition.degrees.value);
                processes.reset._state := 29;
			END_IF
        29:
            IF parts.physicalAxis.processes.setPosition.isIdle() THEN
                IF parts.physicalAxis.processes.setPosition.isGood() THEN
                    processes.reset._state := 1000;
                ELSE
                    processes.reset.setActualStatus('Could not sync motor enc with abs enc');
                    processes.reset._state := 999;
				END_IF
			END_IF
        999:
            // error!
            processes.reset.setBad();
            processes.reset.setFinished();
        1000:
            processes.reset.setActualStatus('Reset done');
            // ok done
            processes.reset.setFinished();
            processes.reset.setGood();
    END_CASE
    
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_moveRelative" Id="{7c02681a-3c70-4aa4-a732-68f0e1e8465c}">
      <Declaration><![CDATA[METHOD _moveRelative
VAR_INPUT
END_VAR
VAR
    distanceDegrees : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF processes.moveRelative.isBusy() THEN
    
    IF NOT processes.moveRelative.isStarted() THEN
        
        distanceDegrees := AxesMoveUnitsToDeg(units := processes.moveRelative.get.units, value := processes.moveRelative.get.value);
        
        parts.virtualAxis.processes.moveRelative.start(distance := distanceDegrees, maxVelocity := config.maxVelocitySetpoint);
    
        processes.moveRelative.setStarted();
    ELSE
        
        // update the statuses
        processes.moveRelative.statuses.healthStatus(
            isGood := parts.virtualAxis.processes.moveRelative.statuses.healthStatus.isGood,
            hasWarning := parts.virtualAxis.processes.moveRelative.statuses.healthStatus.hasWarning);
        processes.moveRelative.setActualStatus(parts.virtualAxis.processes.moveRelative.actualStatus);
        processes.moveRelative.statuses.busyStatus(isBusy := parts.virtualAxis.processes.moveRelative.statuses.busyStatus.isBusy);
    
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_moveVelocity" Id="{9f6b5acd-90b2-40ba-9ef5-5a4a5b8273a5}">
      <Declaration><![CDATA[METHOD _moveVelocity
VAR_INPUT
END_VAR
VAR
    velocityDegPerSec : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF processes.moveVelocity.isBusy() THEN
    
    IF NOT processes.moveVelocity.isStarted() THEN
        
        velocityDegPerSec := AxesMoveVelocityUnitsToDegPerSec(units := processes.moveVelocity.get.units, value := processes.moveVelocity.get.value);
        
        parts.virtualAxis.processes.moveVelocity.start(value := velocityDegPerSec);
    
        processes.moveVelocity.setStarted();
            
	END_IF

    // update the statuses
    processes.moveVelocity.statuses.busyStatus(isBusy := parts.virtualAxis.processes.moveVelocity.statuses.busyStatus.isBusy);
    processes.moveVelocity.statuses.healthStatus(
        isGood := parts.virtualAxis.processes.moveVelocity.statuses.healthStatus.isGood,
        hasWarning := parts.virtualAxis.processes.moveVelocity.statuses.healthStatus.hasWarning);
    processes.moveVelocity.setActualStatus(parts.virtualAxis.processes.moveVelocity.actualStatus);

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_moveAbsolute" Id="{f2126ba3-d077-4603-af69-d62722ef2322}">
      <Declaration><![CDATA[METHOD _moveAbsolute
VAR_INPUT
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF processes.moveAbsolute.isBusy() THEN
    
    IF NOT processes.moveAbsolute.isStarted() THEN
        
    
        targetStart(newDegreesValue := AxesMoveUnitsToDeg(units := processes.moveAbsolute.get.units, value := processes.moveAbsolute.get.value));
        
        parts.virtualAxis.processes.moveAbsolute.start(position := targetStart.degrees.value + processes.moveAbsolute.get.offset, maxVelocity := config.maxVelocitySetpoint);

        processes.moveAbsolute.setStarted();
        
    END_IF

    IF parts.virtualAxis.processes.moveAbsolute.isIdle() THEN
        
        IF parts.virtualAxis.processes.moveAbsolute.isGood() THEN
            processes.moveAbsolute.setGood();
        ELSE
            processes.moveAbsolute.setBad();
		END_IF
        
        processes.moveAbsolute.setActualStatus(parts.virtualAxis.processes.moveAbsolute.actualStatus);
        processes.moveAbsolute.setFinished();
    
	END_IF
    
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_update" Id="{f8834ebd-eee8-4a05-ba5f-05d67e096862}">
      <Declaration><![CDATA[METHOD _update : LREAL
VAR_INPUT
END_VAR
VAR
    absoluteEncoderReduction : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// update the superclass
SUPER^(
    config := config,
    aziDriveChannel := aziDriveChannel,
    ablDriveChannel := ablDriveChannel,
    aziMainDriveChannel := aziMainDriveChannel,
    ablMainDriveChannel := ablMainDriveChannel);
    
// update the limit switches
positiveLimitSwitchError := NOT GETBIT32(inVal32 := INT_TO_DWORD(aziMainDriveChannel.digitalInputs), bitNo := config.positiveLimitSwitchInput);
negativeLimitSwitchError := NOT GETBIT32(inVal32 := INT_TO_DWORD(aziMainDriveChannel.digitalInputs), bitNo := config.negativeLimitSwitchInput);

// update the LIDA positions
lida1Position(newDegreesValue := AxesLidaValueToPosition(id := AxesIds.AZI, encoderValue := parts.lida1.counterValue, invert := config.lidasInvert));
lida2Position(newDegreesValue := AxesLidaValueToPosition(id := AxesIds.AZI, encoderValue := parts.lida2.counterValue, invert := config.lidasInvert));
lida3Position(newDegreesValue := AxesLidaValueToPosition(id := AxesIds.AZI, encoderValue := parts.lida3.counterValue, invert := config.lidasInvert));
lida4Position(newDegreesValue := AxesLidaValueToPosition(id := AxesIds.AZI, encoderValue := parts.lida4.counterValue, invert := config.lidasInvert));

// calculate the average value
lidaAveragePosition( newDegreesValue := 
    AxesCalculateLidaAveragePosition(
        lida1Position := lida1Position.degrees.value,
        lida2Position := lida2Position.degrees.value,
        lida3Position := lida3Position.degrees.value,
        lida4Position := lida4Position.degrees.value,
        useLida1      := NOT (parts.lida1.openCircuit OR parts.lida1.syncError OR parts.lida1.extrapolationStall), 
        useLida2      := NOT (parts.lida2.openCircuit OR parts.lida2.syncError OR parts.lida2.extrapolationStall), 
        useLida3      := NOT (parts.lida3.openCircuit OR parts.lida3.syncError OR parts.lida3.extrapolationStall), 
        useLida4      := NOT (parts.lida4.openCircuit OR parts.lida4.syncError OR parts.lida4.extrapolationStall)));

// update the absolute encoder position
IF  config.absoluteEncoderInvert THEN
    absoluteEncoderReduction := -REDUCTION_ABS_ENC_TO_TEL;
ELSE
    absoluteEncoderReduction := REDUCTION_ABS_ENC_TO_TEL;
END_IF
absoluteEncoderPosition(newDegreesValue := AxesSSIValueToPosition(
        reduction       := absoluteEncoderReduction,
        encoderValue    := parts.absoluteEncoder.counterValue,
        zeroOffset      := config.absoluteEncoderOffset));

// update the position/velocity/acceleration
actPos(newDegreesValue := parts.physicalAxis.axis_ref.NcToPlc.ActPos);
actVelo(newDegreesPerSecondValue := parts.physicalAxis.axis_ref.NcToPlc.ActVelo);
actAcc(newDegreesPerSquareSecondValue := parts.physicalAxis.axis_ref.NcToPlc.ActAcc);
setPos(newDegreesValue := parts.physicalAxis.axis_ref.NcToPlc.SetPos);
setVelo(newDegreesPerSecondValue := parts.physicalAxis.axis_ref.NcToPlc.SetVelo);
setAcc(newDegreesPerSquareSecondValue := parts.physicalAxis.axis_ref.NcToPlc.SetAcc);
IF parts.physicalAxis.axis_ref.Status.ExtSetPointGenEnabled THEN
    targetPos(newDegreesValue := parts.physicalAxis.axis_ref.PlcToNc.ExtSetPos);
    targetOffset(newDegreesValue := parts.virtualAxis.actPos.degrees.value - targetStart.degrees.value);
ELSE
    targetPos(newDegreesValue := parts.physicalAxis.axis_ref.NcToPlc.TargetPos);
    targetOffset(newDegreesValue := 0.0);
END_IF

// update the actual torque feedback on the telescope side
actTorqueAzi(newNewtonmeterValue := aziDriveChannel.actualTorqueFeedback.newtonmeter.value * REDUCTION_AZI_TO_TEL);
actTorqueAbl(newNewtonmeterValue := ablDriveChannel.actualTorqueFeedback.newtonmeter.value * REDUCTION_ABL_TO_TEL);


// check if the motor is slipping w.r.t. the lidas
slipError :=     parts.physicalAxis.axis_ref.Status.Homed 
             AND parts.physicalAxis.axis_ref.Status.ExtSetPointGenEnabled 
             AND (ABS(parts.physicalAxis.axis_ref.PlcToNc.PositionCorrection) > config.slipLimit);
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>