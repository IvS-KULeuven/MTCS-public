<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <DUT Name="AxesAzimuthConfig" Id="{75060113-ac23-46fa-a0da-9f6278a2754c}">
    <Declaration><![CDATA[TYPE AxesAzimuthConfig :
STRUCT
	///Offset in degrees, of the absolute encoder, w.r.t. zero
	absoluteEncoderOffset: LREAL;
	///TRUE to invert the counting direction of the absolute encoder
	absoluteEncoderInvert: BOOL;
	///TRUE to invert the counting direction of the LIDAs
	lidasInvert: BOOL;
	///How many degrees should the moveOutOfLimitSwitch process try to move?
	moveOutOfLimitSwitchDistance: LREAL;
	///Which input (0-7) represents the positive limit switch?
	positiveLimitSwitchInput: SINT;
	///Which input (0-7) represents the negative limit switch?
	negativeLimitSwitchInput: SINT;
	///Limit the minimum position of the virtual axis to this value in degrees
	minPositionLimitVirtualAxis: LREAL;
	///Limit the maximum position of the virtual axis to this value in degrees
	maxPositionLimitVirtualAxis: LREAL;
	///Limit the minimum position of the physical axis to this value in degrees
	minPositionLimitPhysicalAxis: LREAL;
	///Limit the maximum position of the physical axis to this value in degrees
	maxPositionLimitPhysicalAxis: LREAL;
	///Limit the velocity of the axis to this value in degrees/sec
	velocityLimit: LREAL;
	///Limit the acceleration (or deceleration) of the axis to this value in degrees/sec^2
	accelerationLimit: LREAL;
	///The minimum position setpoint of the axis in degrees (should be a bit before the minPositionLimit)
	minPositionSetpoint: LREAL;
	///The maximum position setpoint of the axis in degrees (should be a bit before the maxPositionLimit)
	maxPositionSetpoint: LREAL;
	///The maximum velocity setpoint of the axis in degrees/sec
	maxVelocitySetpoint: LREAL;
	///The maximum acceleration setpoint of the axis in degrees/sec^2
	maxAccelerationSetpoint: LREAL;
	///If the difference between the LIDA-encoder and motor-encoder positions is above this value in degrees, then we have detected slip
	slipLimit: LREAL;
	///The ABL torque can rise maximum ... Nm/s on the telescope axis (always >0)
	ablMaxTorqueRiseSpeed: LREAL;
	///The ABL torque can fall maximum ... Nm/s on the telescope axis (always >0)
	ablMaxTorqueFallSpeed: LREAL;
	///The maximum ABL torque in Nm/s on the telescope axis (always >0)
	ablMaxTorque: LREAL;
	///The minimum ABL torque in Nm/s on the telescope axis (always >0)
	ablMinTorque: LREAL;
	///The ABL torque when the axis is not accelerating or decelerating (always >0)
	ablZeroAccTorque: LREAL;
	///Scale the ABL output torque by this fraction value (only for testing purposes, must be 1 normally!)
	ablTorqueOutputOverride: LREAL;
	///True if a positive torque must be applied, false if a negative torque must be applied
	ablPositiveTorque: BOOL;
	///True if the AZI and ABL axes rotate in the same direction?
	aziAndAblSameDirection: BOOL;
	///The position of the homing mark (in degrees), with respect to the absolute zero
	homingHomePosition: LREAL;
	///Absolute encoder position where the homing should go to first, in degrees
	homingStartAbsEncPosition: LREAL;
	///Velocity when going to the start position, in degrees/sec
	homingGotoStartVelocity: LREAL;
	///Velocity to search for the homing mark, in degrees/sec
	homingVelocity: LREAL;
	///Maximum distance to be covered while searching for the homing mark, in degrees
	homingRange: LREAL;
	///Quick stop deceleration, in degrees/sec2
	quickStopDeceleration: LREAL;
	///Quick stop jerk, in degrees/sec3
	quickStopJerk: LREAL;
END_STRUCT
END_TYPE
]]></Declaration>
  </DUT>
</TcPlcObject>