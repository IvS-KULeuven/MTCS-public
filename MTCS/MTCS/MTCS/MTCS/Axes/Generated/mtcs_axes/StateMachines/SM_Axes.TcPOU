<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <POU Name="SM_Axes" Id="{12b9a51c-61f8-4bfd-95f7-8ee0cd95311b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK SM_Axes
VAR_INPUT
	///Editable configuration of the Axes subsystem
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	editableConfig: AxesConfig;
	///Data from the C++ task
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	fromCppAxes AT %I*: TmcToPlcAxes;
END_VAR
VAR_OUTPUT
	///Current status description
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	actualStatus: STRING;
	///True if the axes are powered off due to a person entering the dome
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	isPoweredOffByPersonInDome: BOOL;
	///True if the telescope is pointing
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	isPointing: BOOL;
	///True if the telescope is tracking
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	isTracking: BOOL;
	///True if the telescope is offsetting (movin
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	isOffsetting: BOOL;
	///True if the telescope is at a known position
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	isAtKnownPosition: BOOL;
	///Is a pointing model currently active?
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	isPointingModelActive: BOOL;
	///Are there any position limits reached?
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	isLimitsReached: BOOL;
	///Which rotator is active?
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	activeRotator: AxesRotatorActivity;
	///Name of the known position if isAtKnownPosition is True
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	actualKnownPositionName: STRING;
	///The actual target
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	target: AxesTarget;
	///The actual feedback
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	feedback: AxesFeedback;
	///Active configuration of the Axes subsystem
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	config: AxesConfig;
	///Data to the C++ task
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	toCppAxes AT %Q*: TmcFromPlcAxes;
	///Currently active TPoint model (if isPointingModelActive is TRUE)
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	activePointingModel: AxesPointingModelConfig;
	///Number of the currently active TPoint model (if isPointingModelActive is TRUE), -1 if no model is active
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	activePointingModelNumber: INT;
	///Statuses of the state machine
	statuses: AxesStatuses;
	///Parts of the state machine
	parts: AxesParts;
	///Processes of the state machine
	processes: AxesProcesses;
END_VAR
VAR_IN_OUT
	///Reference to the timing service
	{attribute 'OPC.UA.DA' := '0'}
	timing: ServicesTiming;
	///Reference to the motion blocking safety
	{attribute 'OPC.UA.DA' := '0'}
	motionBlocking: SafetyMotionBlocking;
	///Reference to the dome access safety
	{attribute 'OPC.UA.DA' := '0'}
	domeAccess: SafetyDomeAccess;
	///Shared operator status
	{attribute 'OPC.UA.DA' := '0'}
	operatorStatus: OperatorStatus;
	///Shared activity status
	{attribute 'OPC.UA.DA' := '0'}
	activityStatus: ActivityStatus;
	///Instrument config *if* isInstrumentActive is TRUE
	{attribute 'OPC.UA.DA' := '0'}
	activeInstrument: InstrumentConfig;
	///Is an instrument currently active (i.e. is M3 static at a known position?)
	{attribute 'OPC.UA.DA' := '0'}
	isInstrumentActive: BOOL;
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[parts.azi(
    isEnabled := operatorStatus.tech,
    id := AxesIds.AZI,
    config := config.azi,
    aziDriveChannel := parts.io.parts.aziDrive.parts.channelA,
    ablDriveChannel := parts.io.parts.ablDrive.parts.channelA,
    aziMainDriveChannel := parts.io.parts.aziDrive.parts.channelA,
    ablMainDriveChannel := parts.io.parts.ablDrive.parts.channelA);
parts.ele(
    isEnabled := operatorStatus.tech,
    id := AxesIds.ELE,
    config := config.ele,
    driveChannel := parts.io.parts.eleDrive.parts.channelA,
    mainDriveChannel := parts.io.parts.eleDrive.parts.channelA);
parts.roc(
    isEnabled := operatorStatus.tech,
    id := AxesIds.ROC,
    config := config.roc,
    driveChannel := parts.io.parts.aziDrive.parts.channelB,
    mainDriveChannel := parts.io.parts.aziDrive.parts.channelA);
parts.ron(
    isEnabled := operatorStatus.tech,
    id := AxesIds.RON,
    config := config.ron,
    driveChannel := parts.io.parts.ablDrive.parts.channelB,
    mainDriveChannel := parts.io.parts.ablDrive.parts.channelA);
parts.io( isEnabled := operatorStatus.tech );
parts.configManager( isEnabled := operatorStatus.tech );
parts.tpoint( isEnabled := operatorStatus.tech );
statuses.initializationStatus();
statuses.healthStatus(
    isGood := feedback.statuses.healthStatus.isGood AND (parts.azi.statuses.healthStatus.isGood AND (parts.ele.statuses.healthStatus.isGood AND (parts.roc.statuses.healthStatus.isGood AND (parts.ron.statuses.healthStatus.isGood AND (parts.configManager.statuses.healthStatus.isGood AND (parts.tpoint.statuses.healthStatus.isGood AND (parts.io.statuses.healthStatus.isGood AND (processes.initialize.statuses.healthStatus.isGood AND (processes.reset.statuses.healthStatus.isGood AND (processes.lock.statuses.healthStatus.isGood AND (processes.unlock.statuses.healthStatus.isGood AND (processes.changeOperatingState.statuses.healthStatus.isGood AND (processes.setTarget.statuses.healthStatus.isGood AND (processes.point.statuses.healthStatus.isGood AND (processes.pointRelative.statuses.healthStatus.isGood AND (processes.stop.statuses.healthStatus.isGood AND (processes.quickStop.statuses.healthStatus.isGood AND (processes.powerOn.statuses.healthStatus.isGood AND (processes.powerOff.statuses.healthStatus.isGood AND (processes.doHoming.statuses.healthStatus.isGood AND (processes.moveAbsolute.statuses.healthStatus.isGood AND (processes.moveRelative.statuses.healthStatus.isGood AND (processes.moveKnownPosition.statuses.healthStatus.isGood AND (processes.enablePointingModel.statuses.healthStatus.isGood AND (processes.disablePointingModel.statuses.healthStatus.isGood AND processes.setAlphaDeltaVelocity.statuses.healthStatus.isGood))))))))))))))))))))))))),
    hasWarning := feedback.statuses.healthStatus.hasWarning OR (parts.azi.statuses.healthStatus.hasWarning OR (parts.ele.statuses.healthStatus.hasWarning OR (parts.roc.statuses.healthStatus.hasWarning OR (parts.ron.statuses.healthStatus.hasWarning OR (parts.configManager.statuses.healthStatus.hasWarning OR (parts.tpoint.statuses.healthStatus.hasWarning OR (parts.io.statuses.healthStatus.hasWarning OR (processes.initialize.statuses.healthStatus.hasWarning OR (processes.reset.statuses.healthStatus.hasWarning OR (processes.lock.statuses.healthStatus.hasWarning OR (processes.unlock.statuses.healthStatus.hasWarning OR (processes.changeOperatingState.statuses.healthStatus.hasWarning OR (processes.setTarget.statuses.healthStatus.hasWarning OR (processes.point.statuses.healthStatus.hasWarning OR (processes.pointRelative.statuses.healthStatus.hasWarning OR (processes.stop.statuses.healthStatus.hasWarning OR (processes.quickStop.statuses.healthStatus.hasWarning OR (processes.powerOn.statuses.healthStatus.hasWarning OR (processes.powerOff.statuses.healthStatus.hasWarning OR (processes.doHoming.statuses.healthStatus.hasWarning OR (processes.moveAbsolute.statuses.healthStatus.hasWarning OR (processes.moveRelative.statuses.healthStatus.hasWarning OR (processes.moveKnownPosition.statuses.healthStatus.hasWarning OR (processes.enablePointingModel.statuses.healthStatus.hasWarning OR (processes.disablePointingModel.statuses.healthStatus.hasWarning OR processes.setAlphaDeltaVelocity.statuses.healthStatus.hasWarning))))))))))))))))))))))))));
statuses.busyStatus( isBusy := parts.azi.statuses.busyStatus.busy OR (parts.ele.statuses.busyStatus.busy OR (parts.roc.statuses.busyStatus.busy OR (parts.ron.statuses.busyStatus.busy OR (parts.configManager.statuses.busyStatus.busy OR (parts.tpoint.statuses.busyStatus.busy OR (processes.initialize.statuses.busyStatus.busy OR (processes.reset.statuses.busyStatus.busy OR (processes.lock.statuses.busyStatus.busy OR (processes.unlock.statuses.busyStatus.busy OR (processes.changeOperatingState.statuses.busyStatus.busy OR (processes.setTarget.statuses.busyStatus.busy OR (processes.point.statuses.busyStatus.busy OR (processes.pointRelative.statuses.busyStatus.busy OR (processes.stop.statuses.busyStatus.busy OR (processes.quickStop.statuses.busyStatus.busy OR (processes.powerOn.statuses.busyStatus.busy OR (processes.powerOff.statuses.busyStatus.busy OR (processes.doHoming.statuses.busyStatus.busy OR (processes.moveAbsolute.statuses.busyStatus.busy OR (processes.moveRelative.statuses.busyStatus.busy OR (processes.moveKnownPosition.statuses.busyStatus.busy OR (processes.enablePointingModel.statuses.busyStatus.busy OR (processes.disablePointingModel.statuses.busyStatus.busy OR processes.setAlphaDeltaVelocity.statuses.busyStatus.busy))))))))))))))))))))))) );
statuses.operatingStatus( superState := statuses.initializationStatus.initialized );
statuses.poweredStatus();
processes.initialize( isEnabled := statuses.initializationStatus.shutdown OR (statuses.initializationStatus.initializingFailed OR statuses.initializationStatus.initialized) );
processes.reset( isEnabled := TRUE );
processes.lock( isEnabled := operatorStatus.tech AND statuses.initializationStatus.initialized );
processes.unlock( isEnabled := operatorStatus.tech AND statuses.initializationStatus.locked );
processes.changeOperatingState( isEnabled := statuses.busyStatus.idle AND (statuses.initializationStatus.initialized AND operatorStatus.tech) );
processes.setTarget( isEnabled := statuses.initializationStatus.initialized AND operatorStatus.tech );
processes.point( isEnabled := statuses.initializationStatus.initialized AND (statuses.busyStatus.idle AND statuses.poweredStatus.enabled) );
processes.pointRelative( isEnabled := statuses.initializationStatus.initialized AND (statuses.busyStatus.idle AND statuses.poweredStatus.enabled) );
processes.stop( isEnabled := statuses.initializationStatus.initialized );
processes.quickStop( isEnabled := statuses.initializationStatus.initialized );
processes.powerOn( isEnabled := statuses.initializationStatus.initialized AND processes.powerOn.statuses.busyStatus.idle );
processes.powerOff( isEnabled := statuses.initializationStatus.initialized AND processes.powerOff.statuses.busyStatus.idle );
processes.doHoming( isEnabled := operatorStatus.tech );
processes.moveAbsolute( isEnabled := statuses.initializationStatus.initialized AND (statuses.busyStatus.idle AND statuses.poweredStatus.enabled) );
processes.moveRelative( isEnabled := statuses.initializationStatus.initialized AND (statuses.busyStatus.idle AND statuses.poweredStatus.enabled) );
processes.moveKnownPosition( isEnabled := statuses.initializationStatus.initialized AND (statuses.busyStatus.idle AND statuses.poweredStatus.enabled) );
processes.enablePointingModel( isEnabled := statuses.busyStatus.idle );
processes.disablePointingModel( isEnabled := statuses.busyStatus.idle );
processes.setAlphaDeltaVelocity( isEnabled := statuses.initializationStatus.initialized AND statuses.busyStatus.idle );
]]></ST>
    </Implementation>
    <Method Name="pointRelative" Id="{0c43c19f-4207-4ff4-af08-6c9136b2fd38}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD pointRelative : RequestResults
VAR_INPUT
	alphaUnits: AxesAlphaUnits;
	alpha: LREAL;
	deltaUnits: AxesDeltaUnits;
	delta: LREAL;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pointRelative := THIS^.processes.pointRelative.request(
    alphaUnits := alphaUnits,
    alpha := alpha,
    deltaUnits := deltaUnits,
    delta := delta);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="changeOperatingState" Id="{10bb8d7d-c3f9-45fc-92cc-8d357933dd41}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD changeOperatingState : RequestResults
VAR_INPUT
	state: OperatingStates;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[changeOperatingState := THIS^.processes.changeOperatingState.request( state := state );
]]></ST>
      </Implementation>
    </Method>
    <Method Name="reset" Id="{25606663-7ab5-436c-857a-7bc5e14ba9b0}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD reset : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[reset := THIS^.processes.reset.request();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="lock" Id="{2c4b508b-fe17-4487-8515-f6b48702bcfc}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD lock : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[lock := THIS^.processes.lock.request();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="unlock" Id="{32efa903-a6dd-4479-b1bc-6697dc39c92f}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD unlock : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[unlock := THIS^.processes.unlock.request();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="setTarget" Id="{3c432970-6155-4695-8050-b81d74ce7091}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD setTarget : RequestResults
VAR_INPUT
	alphaUnits: AxesAlphaUnits;
	alpha: LREAL;
	deltaUnits: AxesDeltaUnits;
	delta: LREAL;
	muUnits: AxesMuUnits;
	muAlpha: LREAL;
	muDelta: LREAL;
	parallax: LREAL;
	radialVelocity: LREAL;
	epoch: LREAL;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[setTarget := THIS^.processes.setTarget.request(
    alphaUnits := alphaUnits,
    alpha := alpha,
    deltaUnits := deltaUnits,
    delta := delta,
    muUnits := muUnits,
    muAlpha := muAlpha,
    muDelta := muDelta,
    parallax := parallax,
    radialVelocity := radialVelocity,
    epoch := epoch);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="setAlphaDeltaVelocity" Id="{51c1be13-41bd-45db-825b-5da1f6918089}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD setAlphaDeltaVelocity : RequestResults
VAR_INPUT
	units: AxesMoveVelocityUnits;
	alphaVelocity: LREAL;
	deltaVelocity: LREAL;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[setAlphaDeltaVelocity := THIS^.processes.setAlphaDeltaVelocity.request(
    units := units,
    alphaVelocity := alphaVelocity,
    deltaVelocity := deltaVelocity);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="quickStop" Id="{67a9af1a-be96-49a9-8dc2-a2532d7e1d4a}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD quickStop : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[quickStop := THIS^.processes.quickStop.request();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveAbsolute" Id="{6ac0e14b-166b-4c8d-9aaf-fa7efe7c4b75}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD moveAbsolute : RequestResults
VAR_INPUT
	units: AxesMoveUnits;
	azi: LREAL;
	ele: LREAL;
	rot: LREAL;
	roc: LREAL;
	ron: LREAL;
	doAzi: BOOL;
	doEle: BOOL;
	doRot: BOOL;
	doRoc: BOOL;
	doRon: BOOL;
	preferMostTravel: BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[moveAbsolute := THIS^.processes.moveAbsolute.request(
    units := units,
    azi := azi,
    ele := ele,
    rot := rot,
    roc := roc,
    ron := ron,
    doAzi := doAzi,
    doEle := doEle,
    doRot := doRot,
    doRoc := doRoc,
    doRon := doRon,
    preferMostTravel := preferMostTravel);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="doHoming" Id="{78b6eeff-c032-4493-9ca5-67a97473c5f5}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD doHoming : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[doHoming := THIS^.processes.doHoming.request();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveRelative" Id="{a3c631c4-ba21-4c2c-b26c-efa946552d18}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD moveRelative : RequestResults
VAR_INPUT
	units: AxesMoveUnits;
	azi: LREAL;
	ele: LREAL;
	rot: LREAL;
	roc: LREAL;
	ron: LREAL;
	doAzi: BOOL;
	doEle: BOOL;
	doRot: BOOL;
	doRoc: BOOL;
	doRon: BOOL;
	preferMostTravel: BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[moveRelative := THIS^.processes.moveRelative.request(
    units := units,
    azi := azi,
    ele := ele,
    rot := rot,
    roc := roc,
    ron := ron,
    doAzi := doAzi,
    doEle := doEle,
    doRot := doRot,
    doRoc := doRoc,
    doRon := doRon,
    preferMostTravel := preferMostTravel);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="powerOff" Id="{bb01bb4f-8ec1-4bfc-b84f-79c195a6d711}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD powerOff : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[powerOff := THIS^.processes.powerOff.request();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="enablePointingModel" Id="{bb32bc27-7bb7-4ce2-b019-baf99345f02a}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD enablePointingModel : RequestResults
VAR_INPUT
	name: STRING;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[enablePointingModel := THIS^.processes.enablePointingModel.request( name := name );
]]></ST>
      </Implementation>
    </Method>
    <Method Name="initialize" Id="{c253fd6c-24e2-47c4-b18f-9f9856d7b1f9}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD initialize : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[initialize := THIS^.processes.initialize.request();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="stop" Id="{c2b43616-26ff-42d3-adbc-dd56b2e6bba4}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD stop : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stop := THIS^.processes.stop.request();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="point" Id="{c41b449f-0032-4033-b8e1-8ca9cce35ccb}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD point : RequestResults
VAR_INPUT
	alphaUnits: AxesAlphaUnits;
	alpha: LREAL;
	deltaUnits: AxesDeltaUnits;
	delta: LREAL;
	muUnits: AxesMuUnits;
	muAlpha: LREAL;
	muDelta: LREAL;
	parallax: LREAL;
	radialVelocity: LREAL;
	epoch: LREAL;
	tracking: BOOL;
	rotUnits: AxesMoveUnits;
	rotOffset: LREAL;
	rocOffset: LREAL;
	ronOffset: LREAL;
	doRotOffset: BOOL;
	doRocOffset: BOOL;
	doRonOffset: BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[point := THIS^.processes.point.request(
    alphaUnits := alphaUnits,
    alpha := alpha,
    deltaUnits := deltaUnits,
    delta := delta,
    muUnits := muUnits,
    muAlpha := muAlpha,
    muDelta := muDelta,
    parallax := parallax,
    radialVelocity := radialVelocity,
    epoch := epoch,
    tracking := tracking,
    rotUnits := rotUnits,
    rotOffset := rotOffset,
    rocOffset := rocOffset,
    ronOffset := ronOffset,
    doRotOffset := doRotOffset,
    doRocOffset := doRocOffset,
    doRonOffset := doRonOffset);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="powerOn" Id="{e2dd16ad-0946-455f-b371-941e8aa4dedf}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD powerOn : RequestResults
VAR_INPUT
	azi: BOOL;
	ele: BOOL;
	roc: BOOL;
	ron: BOOL;
	fw: BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[powerOn := THIS^.processes.powerOn.request(
    azi := azi,
    ele := ele,
    roc := roc,
    ron := ron,
    fw := fw);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveKnownPosition" Id="{e60b4ba1-0add-4f72-908a-8f533d21f820}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD moveKnownPosition : RequestResults
VAR_INPUT
	name: STRING;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[moveKnownPosition := THIS^.processes.moveKnownPosition.request( name := name );
]]></ST>
      </Implementation>
    </Method>
    <Method Name="disablePointingModel" Id="{ef2033ba-391d-4191-8e46-9fe45f7d4a01}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD disablePointingModel : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[disablePointingModel := THIS^.processes.disablePointingModel.request();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>