<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <POU Name="AxesMultiMoveProcess" Id="{4917d59c-1991-47ba-8241-ca77f8ddda51}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK AxesMultiMoveProcess EXTENDS BaseProcess
VAR_INPUT
	///True if the process is waiting for AZI
	waitingForAzi: BOOL;
	///True if the process is waiting for ELE
	waitingForEle: BOOL;
	///True if the process is waiting for ROC
	waitingForRoc: BOOL;
	///True if the process is waiting for RON
	waitingForRon: BOOL;
	///Arguments to be set, before writing do_request TRUE
	{attribute 'OPC.UA.DA' := '1'}
	set: AxesMultiMoveProcessArgs;
END_VAR
VAR_OUTPUT
	///Arguments in use by the process, if do_request was accepted
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	get: AxesMultiMoveProcessArgs;
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF do_request THEN
    do_request_result := request(
    units := set.units,
    azi := set.azi,
    ele := set.ele,
    rot := set.rot,
    roc := set.roc,
    ron := set.ron,
    doAzi := set.doAzi,
    doEle := set.doEle,
    doRot := set.doRot,
    doRoc := set.doRoc,
    doRon := set.doRon,
    preferMostTravel := set.preferMostTravel);
    do_request := FALSE;
END_IF;
SUPER^();
]]></ST>
    </Implementation>
    <Method Name="start" Id="{828e0446-733c-46dd-ac96-60dbdfb2f624}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD start
VAR_INPUT
	///Units of the 'azi', 'ele', 'roc' and 'ron' arguments (RADIANS, DEGREES, ARCSECONDS, ...)
	units: AxesMoveUnits;
	///Angle to move the azimuth axis
	azi: LREAL;
	///Angle to move the elevation axis
	ele: LREAL;
	///Angle to move the currently active rotator (incompatible with 'roc' and 'ron' args)
	rot: LREAL;
	///Angle to move the cassegrain rotation axis (incompatible with 'rot' arg)
	roc: LREAL;
	///Angle to move the nasmyth rotation axis (incompatible with 'rot' arg)
	ron: LREAL;
	///True to move the azimuth axis, false to leave it untouched
	doAzi: BOOL;
	///True to move the elevation axis, false to leave it untouched
	doEle: BOOL;
	///True to move the currently active rotator, false to leave it untouched
	doRot: BOOL;
	///True to move the cassegrain rotation axis, false to leave it untouched
	doRoc: BOOL;
	///True to move the nasmyth rotation axis, false to leave it untouched
	doRon: BOOL;
	///Only in case of relative movement during tracking: If possible, go to the position where there is most travel (if the telescope is tracking). If false, it will go there the quickest way possible.
	preferMostTravel: BOOL := FALSE;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.get.units := units;
THIS^.get.azi := azi;
THIS^.get.ele := ele;
THIS^.get.rot := rot;
THIS^.get.roc := roc;
THIS^.get.ron := ron;
THIS^.get.doAzi := doAzi;
THIS^.get.doEle := doEle;
THIS^.get.doRot := doRot;
THIS^.get.doRoc := doRoc;
THIS^.get.doRon := doRon;
THIS^.get.preferMostTravel := preferMostTravel;
THIS^.statuses.busyStatus( isBusy := TRUE );
THIS^.statuses.healthStatus( isGood := TRUE );
]]></ST>
      </Implementation>
    </Method>
    <Method Name="request" Id="{d8763d0a-6adb-4203-a186-a8952def2986}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD request : RequestResults
VAR_INPUT
	///Units of the 'azi', 'ele', 'roc' and 'ron' arguments (RADIANS, DEGREES, ARCSECONDS, ...)
	units: AxesMoveUnits;
	///Angle to move the azimuth axis
	azi: LREAL;
	///Angle to move the elevation axis
	ele: LREAL;
	///Angle to move the currently active rotator (incompatible with 'roc' and 'ron' args)
	rot: LREAL;
	///Angle to move the cassegrain rotation axis (incompatible with 'rot' arg)
	roc: LREAL;
	///Angle to move the nasmyth rotation axis (incompatible with 'rot' arg)
	ron: LREAL;
	///True to move the azimuth axis, false to leave it untouched
	doAzi: BOOL;
	///True to move the elevation axis, false to leave it untouched
	doEle: BOOL;
	///True to move the currently active rotator, false to leave it untouched
	doRot: BOOL;
	///True to move the cassegrain rotation axis, false to leave it untouched
	doRoc: BOOL;
	///True to move the nasmyth rotation axis, false to leave it untouched
	doRon: BOOL;
	///Only in case of relative movement during tracking: If possible, go to the position where there is most travel (if the telescope is tracking). If false, it will go there the quickest way possible.
	preferMostTravel: BOOL := FALSE;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.statuses.enabledStatus.enabled THEN
    THIS^.start(
        units := units,
        azi := azi,
        ele := ele,
        rot := rot,
        roc := roc,
        ron := ron,
        doAzi := doAzi,
        doEle := doEle,
        doRot := doRot,
        doRoc := doRoc,
        doRon := doRon,
        preferMostTravel := preferMostTravel);
    request := RequestResults.ACCEPTED;
ELSE
    request := RequestResults.REJECTED;
END_IF;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>