<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4018.5">
  <POU Name="SafetyPasswordVerifier" Id="{18df8757-7fee-4282-91ac-f9dc8c1cad16}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK SafetyPasswordVerifier
VAR_INPUT
    signals : ARRAY[1..9] OF BOOL;
END_VAR
VAR_OUTPUT
    correctPasswordEntered : BOOL;
END_VAR
VAR
    
    edges : ARRAY[1..9] OF R_TRIG;
    
    lastPressedKeys : ARRAY[1..4] OF INT;    // first item = oldest keypress
    lastPressedTimes : ARRAY[1..4] OF LREAL; // first item = oldest keypress  [ms]
    keyNumber : INT;
    
    passwordEnteredWithinTime : BOOL;
    passwordEntered : INT;
    lastPasswordEntered : INT;
    
    MIN_TIME_TO_ENTER_PASSWORD : LREAL := 500; // in milliseconds
    MAX_TIME_TO_ENTER_PASSWORD : LREAL := 4000; // in milliseconds
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[

// store the value and the time of a keypress
FOR keyNumber := 1 TO 9 DO
    
    // update the edge detection
    edges[keyNumber]( CLK := signals[keyNumber] );
    
    // if an edge is detected, store the corresponding time
    IF edges[keyNumber].Q THEN
        // forget the oldest keypress and store the most recent keypress
        // --> shift everything to the left
        
        // 1) the key numbers
        lastPressedKeys[1] := lastPressedKeys[2];
        lastPressedKeys[2] := lastPressedKeys[3];
        lastPressedKeys[3] := lastPressedKeys[4];
        lastPressedKeys[4] := keyNumber;
        
        // 2) the keypress times
        lastPressedTimes[1] := lastPressedTimes[2];
        lastPressedTimes[2] := lastPressedTimes[3];
        lastPressedTimes[3] := lastPressedTimes[4];
        lastPressedTimes[4] := GLOBAL.config.TIME_NOW_MS;;
	END_IF
    
END_FOR

// calculate the entered password:
passwordEntered :=   lastPressedKeys[1] * 1000
                   + lastPressedKeys[2] * 100
                   + lastPressedKeys[3] * 10
                   + lastPressedKeys[4] * 1;

// only proceed if a new password has been entered
IF passwordEntered <> lastPasswordEntered THEN
    // for now put correctPasswordEntered to FALSE, and change it later on
    correctPasswordEntered := FALSE;
    
    // update the lastPasswordEntered
    lastPasswordEntered := passwordEntered;

    // check if the password was entered within the MIN_TIME_TO_ENTER_PASSWORD and MAX_TIME_TO_ENTER_PASSWORD:
    passwordEnteredWithinTime :=     lastPressedTimes[4] - lastPressedTimes[1] >= MIN_TIME_TO_ENTER_PASSWORD 
                                 AND lastPressedTimes[4] - lastPressedTimes[1] <= MAX_TIME_TO_ENTER_PASSWORD;
    
    IF passwordEnteredWithinTime THEN
        
        // check if the password matches
        IF passwordEntered = STRING_TO_INT(GLOBAL.config.PASSWORD_TECH) THEN
            // set the output flag (until acknowledgement)
            correctPasswordEntered := TRUE;
        END_IF
    
    END_IF
END_IF
                       
]]></ST>
    </Implementation>
    <Method Name="acknowledgeCorrectPasswordEntered" Id="{ce373f06-e8c8-4963-8bfc-5420d344b481}">
      <Declaration><![CDATA[METHOD acknowledgeCorrectPasswordEntered
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// reset the correctPasswordEntered flag
correctPasswordEntered := FALSE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>