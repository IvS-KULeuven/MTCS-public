<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <POU Name="Safety" Id="{fca3a5ad-b300-4fa8-b61d-3c0125fcb15d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Safety EXTENDS SM_Safety
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    _initializingCurrentAction : INT;
    _initializingLoopIndex : INT;
    _onFirstStartCurrentAction : INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[_update();

_onFirstStart();
_initializing();
_locking();
_unlocking();
_changingOperatingState();

_update();]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{3d45e7a2-91ba-4aea-9883-e62da75c6db9}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[parts.configManager.configure(
    editableConfigAddress       := ADR(editableConfig),
    activeConfigAddress         := ADR(config),
    configLength                := SIZEOF(editableConfig),
    editableConfigSymbolName    := GLOBAL.config.SAFETY_EDITABLE_CONFIG_SYMBOL_NAME,
    activeConfigSymbolName      := GLOBAL.config.SAFETY_ACTIVE_CONFIG_SYMBOL_NAME,
    configFilePath              := GLOBAL.config.SAFETY_CONFIG_FILE_PATH);]]></ST>
      </Implementation>
    </Method>
    <Method Name="_locking" Id="{70f6f7d2-113d-4f97-b0f8-ad63e85a41d0}">
      <Declaration><![CDATA[METHOD _locking
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF processes.lock.statuses.busyStatus.busy THEN
	statuses.initializationStatus(state := InitializationStates.LOCKED);
	
	// done
	processes.lock.setGood();
	processes.lock.setFinished();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_initializing" Id="{751834de-f723-441f-bdf5-0cea815bb37e}">
      <Declaration><![CDATA[METHOD _initializing
VAR_INPUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF processes.initialize.statuses.busyStatus.busy THEN
	
	// start up the initialization
	IF NOT processes.initialize.statuses.startedStatus.started THEN
        // we're now initializing
        statuses.initializationStatus(state := InitializationStates.INITIALIZING);
        _initializingCurrentAction := 0;
        _initializingLoopIndex := 0;
		// OK we're started now
		processes.initialize.setStarted();
	END_IF;
    
    // process the actions
    CASE _initializingCurrentAction OF
        
        0:
            // start loading the config from XML file
            parts.configManager.processes.load.start(parts.configManager.processes.load.set.filePath);
            _initializingCurrentAction := 1;
        1:
            // wait until the config has been loaded
            IF parts.configManager.processes.load.statuses.busyStatus.idle THEN
                IF parts.configManager.processes.load.statuses.healthStatus.good THEN
                    _initializingCurrentAction := 2;
                ELSE
                    _initializingCurrentAction := 999;
                END_IF
            END_IF
        2:
            // now start activating the config
            parts.configManager.processes.activate.start();
            _initializingCurrentAction := 3;
        3:
            // wait until the config has been activated
            IF parts.configManager.processes.activate.statuses.busyStatus.idle THEN
                IF parts.configManager.processes.activate.statuses.healthStatus.good THEN
                    _initializingCurrentAction := 4;
                ELSE
                    _initializingCurrentAction := 999;
                END_IF
            END_IF
        4:
            // restart the E-stops group
            parts.emergencyStops.processes.reset.start();
            _initializingCurrentAction := 5;
        5:
            // wait until the group is restarted
            IF parts.emergencyStops.processes.reset.isIdle() THEN
                _initializingCurrentAction := 6;
			END_IF
        6:
            // restart the hydraulics group
            parts.hydraulics.processes.reset.start();
            _initializingCurrentAction := 7;
        7:
            // wait until the group is restarted
            IF parts.hydraulics.processes.reset.isIdle() THEN
                _initializingCurrentAction := 8;
			END_IF
        8:
            // restart the Dome Access group
            parts.domeAccess.processes.reset.start();
            _initializingCurrentAction := 9;
        9:
            // wait until the group is restarted
            IF parts.domeAccess.processes.reset.isIdle() THEN
                _initializingCurrentAction := 10;
			END_IF
        10:
            // restart the Dome Access group
            parts.motionBlocking.processes.reset.start();
            _initializingCurrentAction := 11;
        11:
            // wait until the group is restarted
            IF parts.motionBlocking.processes.reset.isIdle() THEN
                _initializingCurrentAction := 12;
			END_IF
        12:
            // FOR SOME UNKNOWN REASON, initializing sometimes fails the first time!
            // therefore, we try it multiple times (if necessary) 
            IF     parts.emergencyStops.processes.reset.isGood()
               AND parts.hydraulics.processes.reset.isGood()
               AND parts.domeAccess.processes.reset.isGood()
               AND parts.motionBlocking.processes.reset.isGood()
            THEN
                _initializingCurrentAction := 1000;
            ELSIF _initializingLoopIndex < 1 THEN  
                _initializingLoopIndex := _initializingLoopIndex + 1;
                _initializingCurrentAction := 4;
            ELSE
                _initializingCurrentAction := 999;
            END_IF
        999:
            // there has been an error!
            statuses.initializationStatus(state := InitializationStates.INITIALIZING_FAILED);
            // done
            processes.initialize.setBad();
            processes.initialize.setFinished();
        1000:
            // all done!
            statuses.initializationStatus(state := InitializationStates.INITIALIZED);
            processes.initialize.setGood();
            processes.initialize.setFinished();
	END_CASE
    
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_onFirstStart" Id="{d1831651-5dd9-45b9-8857-645a91d76880}">
      <Declaration><![CDATA[METHOD _onFirstStart
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _onFirstStartCurrentAction OF
    0:
        // start loading the config from XML file
        parts.configManager.processes.load.start(parts.configManager.processes.load.set.filePath);
        _onFirstStartCurrentAction := 1;
    1:
        // wait until the config has been loaded
        IF parts.configManager.processes.load.statuses.busyStatus.idle THEN
            IF parts.configManager.processes.load.statuses.healthStatus.good THEN
                _onFirstStartCurrentAction := 2;
            ELSE
                _onFirstStartCurrentAction := 999;
            END_IF
        END_IF
    2:
        // now start activating the config
        parts.configManager.processes.activate.start();
        _onFirstStartCurrentAction := 3;
    3:
        // wait until the config has been activated
        IF parts.configManager.processes.activate.statuses.busyStatus.idle THEN
            IF parts.configManager.processes.activate.statuses.healthStatus.good THEN
                _onFirstStartCurrentAction := 4;
            ELSE
                _onFirstStartCurrentAction := 999;
            END_IF
        END_IF
    4:
        // nothing to do, done!
        ;
    999:
        // error, but nothing we can do about it now!
        ;

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="_update" Id="{de54da48-268e-4e8a-a28c-0a2bc83a12a7}">
      <Declaration><![CDATA[METHOD _update
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^(operatorStatus := operatorStatus, activityStatus := activityStatus);

IF statuses.initializationStatus.initialized THEN
    IF statuses.healthStatus.bad THEN
        actualStatus := 'ERROR';
    ELSIF statuses.healthStatus.good OR statuses.healthStatus.warning THEN
        IF statuses.operatingStatus.manual THEN
            actualStatus := 'MANUAL';
        ELSIF statuses.operatingStatus.auto THEN
            IF statuses.busyStatus.busy THEN
                IF    parts.emergencyStops.processes.reset.isBusy()
                   OR parts.hydraulics.processes.reset.isBusy()
                   OR parts.motionBlocking.processes.reset.isBusy() 
                THEN
                   actualStatus := 'Resetting...';
                ELSIF parts.hydraulics.processes.startupPumps.isBusy() THEN
                    actualStatus := 'Pumps starting up';
                ELSE
                    actualStatus := 'BUSY';
				END_IF
            ELSIF statuses.busyStatus.idle THEN
                actualStatus := 'All good';
            ELSE
                actualStatus := 'UNKNOWN';
			END_IF
        ELSE
            actualStatus := 'UNKNOWN';
		END_IF
    ELSE
        actualStatus := 'UNKNOWN';
	END_IF
ELSE
    actualStatus := InitializationStatusToString(statuses.initializationStatus);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_unlocking" Id="{e1c0fdc5-410d-4fcd-99a7-2b6cd30ea5d8}">
      <Declaration><![CDATA[METHOD _unlocking
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF processes.unlock.statuses.busyStatus.busy THEN
	statuses.initializationStatus(state := InitializationStates.INITIALIZED);
	
	// done
	processes.unlock.setGood();
	processes.unlock.setFinished();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_changingOperatingState" Id="{f687eac5-ceb2-4b77-983d-7a89146376c6}">
      <Declaration><![CDATA[METHOD _changingOperatingState
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF SUPER^.processes.changeOperatingState.statuses.busyStatus.busy THEN
	SUPER^.processes.changeOperatingState.setStarted();
	SUPER^.statuses.operatingStatus(state := SUPER^.processes.changeOperatingState.get.state);
	SUPER^.processes.changeOperatingState.setFinished();
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>