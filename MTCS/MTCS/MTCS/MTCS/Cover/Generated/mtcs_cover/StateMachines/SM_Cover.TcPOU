<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <POU Name="SM_Cover" Id="{a501cfab-5bed-4b66-a183-b20c16ffb42c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK SM_Cover
VAR_INPUT
	///Editable configuration of the cover
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	editableConfig: CoverConfig;
END_VAR
VAR_OUTPUT
	///Current status description
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	actualStatus: STRING;
	///Active configuration of the cover
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	config: CoverConfig;
	///The current measurement of the selected panels
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	currentMeasurement: CurrentMeasurement;
	///Statuses of the state machine
	statuses: CoverStatuses;
	///Parts of the state machine
	parts: CoverParts;
	///Processes of the state machine
	processes: CoverProcesses;
END_VAR
VAR_IN_OUT
	{attribute 'OPC.UA.DA' := '0'}
	operatorStatus: OperatorStatus;
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[currentMeasurement();
parts.top(
    initializationStatus := statuses.initializationStatus,
    operatorStatus := operatorStatus,
    operatingStatus := statuses.operatingStatus,
    config := config.top,
    coverConfig := config);
parts.bottom(
    initializationStatus := statuses.initializationStatus,
    operatorStatus := operatorStatus,
    operatingStatus := statuses.operatingStatus,
    config := config.bottom,
    coverConfig := config);
parts.io();
parts.apertureProcedure(
    top := parts.top,
    bottom := parts.bottom,
    coverConfig := config);
parts.configManager( isEnabled := operatorStatus.tech AND statuses.initializationStatus.initialized );
statuses.initializationStatus();
statuses.apertureStatus(
    isOpen := parts.top.statuses.apertureStatus.open AND parts.bottom.statuses.apertureStatus.open,
    isClosed := parts.top.statuses.apertureStatus.closed AND parts.bottom.statuses.apertureStatus.closed);
statuses.healthStatus(
    isGood := parts.top.statuses.healthStatus.isGood AND (parts.bottom.statuses.healthStatus.isGood AND (parts.apertureProcedure.statuses.healthStatus.isGood AND parts.io.statuses.healthStatus.isGood)),
    hasWarning := (parts.top.statuses.healthStatus.hasWarning OR (parts.bottom.statuses.healthStatus.hasWarning OR (parts.apertureProcedure.statuses.healthStatus.hasWarning OR parts.io.statuses.healthStatus.hasWarning))) OR (statuses.busyStatus.idle AND (NOT(statuses.apertureStatus.open OR statuses.apertureStatus.closed))));
statuses.busyStatus( isBusy := parts.top.statuses.busyStatus.busy OR (parts.bottom.statuses.busyStatus.busy OR parts.apertureProcedure.statuses.busyStatus.busy) );
statuses.operatingStatus( superState := statuses.initializationStatus.initialized );
processes.initialize( isEnabled := statuses.initializationStatus.shutdown OR (statuses.initializationStatus.initializingFailed OR statuses.initializationStatus.initialized) );
processes.lock( isEnabled := operatorStatus.tech AND statuses.initializationStatus.initialized );
processes.unlock( isEnabled := operatorStatus.tech AND statuses.initializationStatus.locked );
processes.reset( isEnabled := statuses.initializationStatus.initialized AND (parts.apertureProcedure.state = CoverApertureProcedureStates.ERROR) );
processes.changeOperatingState( isEnabled := statuses.busyStatus.idle AND statuses.initializationStatus.initialized );
processes.open( isEnabled := (statuses.busyStatus.idle OR (statuses.busyStatus.busy AND (parts.apertureProcedure.state = CoverApertureProcedureStates.CLOSING_BOTH_PANELS))) AND (statuses.initializationStatus.initialized AND (statuses.operatingStatus.auto AND (NOT(statuses.apertureStatus.open)))) );
processes.close( isEnabled := (statuses.busyStatus.idle OR (statuses.busyStatus.busy AND (parts.apertureProcedure.state = CoverApertureProcedureStates.OPENING_BOTH_PANELS))) AND (statuses.initializationStatus.initialized AND (statuses.operatingStatus.auto AND (NOT(statuses.apertureStatus.closed)))) );
processes.abort( isEnabled := parts.apertureProcedure.statuses.busyStatus.busy );
]]></ST>
    </Implementation>
    <Method Name="unlock" Id="{32a6099d-9fab-47c4-a418-21ab30e1e7ae}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD unlock : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[unlock := THIS^.processes.unlock.request();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="abort" Id="{33947553-1f1b-408c-997f-d4f1a95494f5}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD abort : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[abort := THIS^.processes.abort.request();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="close" Id="{8383741d-2eb4-4902-9c20-5bde72184010}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD close : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[close := THIS^.processes.close.request();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="changeOperatingState" Id="{880c99e2-11a2-4869-80cc-6de5933948b2}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD changeOperatingState : RequestResults
VAR_INPUT
	state: OperatingStates;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[changeOperatingState := THIS^.processes.changeOperatingState.request( state := state );
]]></ST>
      </Implementation>
    </Method>
    <Method Name="reset" Id="{94619f88-639a-4d0c-b3bb-39cb296ae81f}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD reset : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[reset := THIS^.processes.reset.request();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="lock" Id="{9f487783-efde-4911-b2fb-1be3d20590d5}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD lock : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[lock := THIS^.processes.lock.request();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="open" Id="{df1e8aa6-31a6-430b-9d05-2c4cb6325606}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD open : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[open := THIS^.processes.open.request();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="initialize" Id="{f204a3aa-0dba-4833-8728-0b9254174875}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable' := '1'}
METHOD initialize : RequestResults
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[initialize := THIS^.processes.initialize.request();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>